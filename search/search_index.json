{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TV Series Downloader [\u7535\u89c6\u8282\u76ee\u4e0b\u8f7d\u7a0b\u5e8f]","text":"<p>This Program is under active development</p> <p>A small program to download TV and movies from websites, and saves files in a Plex-readable format.</p> <p>This program does not provide any of the media content, instead, it grabs content through sites from the internet. Keep in mind that the copyright of all videos downloaded by this program belongs to the original creator.</p> <p>\u8c28\u8bb0\u672c\u7a0b\u5e8f\u4e0b\u8f7d\u7684\u6240\u6709\u89c6\u9891\u7248\u6743\u5f52\u539f\u521b\u8005\u6240\u6709\uff0c\u672c\u7a0b\u5e8f\u53ea\u63d0\u4f9b\u4e0b\u8f7d\u670d\u52a1\uff0c\u5e76\u4e0d\u63d0\u4f9b\u8d44\u6e90\u5b58\u50a8\uff0c\u4e5f\u4e0d\u53c2\u4e0e\u5f55\u5236\u3001\u4e0a\u4f20\u3002 \u82e5\u672c\u7a0b\u5e8f\u65e0\u610f\u4fb5\u72af\u4e86\u8d35\u53f8\u7248\u6743\uff0c\u8bf7\u65b0\u589e Issue \u63d0\u51fa \u3002</p>"},{"location":"#installation-and-usage","title":"Installation and Usage","text":""},{"location":"#setup-and-installation","title":"Setup and installation","text":"<pre><code>pip install tvsd\ntvsd --help # Show available commands\n</code></pre>"},{"location":"#update","title":"Update","text":"<pre><code>pip install tvsd -U\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>tvsd search &lt;your-search-query&gt; # Search query for media from sources and downloads if available\ntvsd clean-temp # Removes everything in temp downloading directory, useful after app crashed or aborted\n</code></pre> <p>More features coming soon, feel free to raise feature request or issues.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Contributions are welcomed, contribution methods and accurate details will be included very soon.</p> <pre><code>git clone https://github.com/SheepYY039/tvsd.git\ncd tvsd\nmake setup-dev-env # install pre-commit hooks\npoetry install\n# python3 setup.py install\ncp .env.example .env # update .env according to your environment\n</code></pre>"},{"location":"#versioning","title":"Versioning","text":"<p>This project uses Commitizen to help release and versioning management.</p> <ul> <li>Fetch GitHub Version Tags: <code>make fetch-tags</code></li> <li>Commit: <code>cz commit</code></li> <li>Update Release Version: <code>make bump</code></li> <li>Push GitHub Version Tag: <code>make push-tag</code></li> </ul>"},{"location":"#publish","title":"Publish","text":"<pre><code>poetry config pypi-token.pypi &lt;my-pypi-token&gt;\npoetry build\npoetry publish\n</code></pre>"},{"location":"#bulma-configuration","title":"Bulma Configuration","text":"<p>Quoting from the <code>django-simple-bulma</code> documentation</p> <p>Run <code>python manage.py collectstatic</code> command in order to build Bulma and move it to your <code>staticfiles</code> folder. Please note that you will need to use this command every time you make a change to the configuration, as this is the only way to rebuild the Bulma css file.</p> <pre><code>poetry run python manage.py collectstatic\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li> Search &amp; Download Shows</li> <li> Track new episodes</li> <li> Web UI</li> <li> Docker</li> <li> Add Searching Progress Bar</li> </ul>"},{"location":"#inspired-by-and-credits-to","title":"Inspired By and Credits to","text":"<ul> <li>https://github.com/hectorqin/reader</li> <li>Sonarr</li> </ul>"},{"location":"#disclaimer","title":"\u514d\u8d23\u58f0\u660e\uff08Disclaimer\uff09","text":"<p>This program is only a tool for personal and mainly educational purposes, and also for those who would like to watch TV shows in environments without quality internet access, e.g. on the plane.</p>"},{"location":"#responsibilities","title":"Responsibilities","text":"<p>By using this program to download any form of media (\"content\"), you are entirely responsible for the content of, and any harm resulting from, that Content. That is the case regardless of whether the Content in question constitutes text, graphics, an audio file, or computer software. By using this program, you represent and warrant that:</p> <ul> <li>the downloading, copying and use of the Content will not infringe the proprietary rights, including but not limited to   the copyright, patent, trademark or trade secret rights, of any third party;</li> <li>you have fully complied with any third-party licenses relating to the Content, and have done all things necessary to   successfully pass through to end users any required terms;</li> <li>the Content does not contain or install any viruses, worms, malware, Trojan horses or other harmful or destructive   content;</li> <li>the Content does not contain unethical or unwanted commercial content designed to drive traffic to third party sites   or boost the search engine rankings of third party sites, or to further unlawful acts (such as phishing) or mislead   recipients as to the source of the material (such as spoofing);</li> <li>the Content is not pornographic, does not contain threats or incite violence, and does not violate the privacy or   publicity rights of any third party;</li> <li>your content is not getting advertised via unwanted electronic messages such as spam links on newsgroups, email lists,   blogs and websites, and similar unsolicited promotional methods;</li> </ul>"},{"location":"#disclaimer-of-warranties","title":"Disclaimer of Warranties","text":"<p>The program is provided \u201cas is\u201d. The program and its suppliers and licensors hereby disclaim all warranties of any kind, express or implied, including, without limitation, the warranties of merchantability, fitness for a particular purpose and non-infringement. Neither this program nor its suppliers and licensors, makes any warranty that the program will be error free or that cess thereto will be continuous or uninterrupted. If you\u2019re actually reading this, here\u2019s a treat. You understand that you download from, or otherwise obtain content or services through, this program at your own discretion and risk.</p> <p>This document is CC-BY-SA. It was last updated March 15, 2023.</p> <p>Originally adapted from the Sonarr Terms of Service.</p>"},{"location":"CLI/","title":"CLI Reference","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"CLI/#app","title":"app","text":"<p>Entry point for the TVSD CLI application.</p> <p>This function initializes the config file before setting instance level. It applies the config and sets the state of the application based on the provided options.</p> <p>Usage:</p> <pre><code>tvsd [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --version             Show the application's version and exit.\n  --verbose / --no-verbose  Show verbose output.  [default: no-verbose]\n  -sd, --series-dir TEXT    Specify the series directory, overrides config\n                            file\n  -mr, --media-root TEXT    Specify the media root, overrides config file\n  -e, --env TEXT            Specify the environment\n  --dry-run\n  --install-completion      Install completion for the current shell.\n  --show-completion         Show completion for the current shell, to copy it\n                            or customize the installation.\n</code></pre>"},{"location":"CLI/#clean-base","title":"clean-base","text":"<p>Remove empty directories in the base path</p> <p>Usage:</p> <pre><code>tvsd clean-base [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -i, --interactive  Interactive mode\n  -g, --greedy       Remove directories without videos\n  --target TEXT      Target directory\n  --no-confirm\n</code></pre>"},{"location":"CLI/#clean-temp","title":"clean-temp","text":"<p>Cleans the temp directory.</p> <p>This function validates the config file and then prompts the user to confirm whether they want to delete all files in the temp directory. If the user confirms, all files in the temp directory are deleted and a new empty directory is created.</p> <p>Raises:     FileNotFoundError: If temp directory does not exist</p> <p>Usage:</p> <pre><code>tvsd clean-temp [OPTIONS]\n</code></pre>"},{"location":"CLI/#list-shows","title":"list-shows","text":"<p>List all shows in the database.</p> <p>This function retrieves a list of all shows in the database and displays them in a table format.</p> <p>Usage:</p> <pre><code>tvsd list-shows [OPTIONS]\n</code></pre>"},{"location":"CLI/#print-state","title":"print-state","text":"<p>Print the current state of the application.</p> <p>This function prints the current state of the application, including all key-value pairs in the <code>state</code> dictionary.</p> <p>Raises:     ConfigFileError: If the configuration file is invalid or missing.</p> <p>Usage:</p> <pre><code>tvsd print-state [OPTIONS]\n</code></pre>"},{"location":"CLI/#remove-show","title":"remove-show","text":"<p>List shows and remove selected show.</p> <p>This function lists all the shows and their indices, prompts the user to select a show index to remove, and then removes the selected show. If the user selects an invalid index or cancels the prompt, the function aborts and raises a typer.Abort() exception.</p> <p>Returns:     None</p> <p>Usage:</p> <pre><code>tvsd remove-show [OPTIONS]\n</code></pre>"},{"location":"CLI/#search","title":"search","text":"<p>Search for media and download</p> <p>Args:     specials_only (Optional[bool], optional): Download only specials episode     query (str): query string</p> <p>Usage:</p> <pre><code>tvsd search [OPTIONS] QUERY\n</code></pre> <p>Options:</p> <pre><code>  QUERY           [required]\n  -s, --specials  Download Specials Only\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v141-2024-08-08","title":"v1.4.1 (2024-08-08)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li> new release bug fixes</li> </ul>"},{"location":"changelog/#v140-2024-08-08","title":"v1.4.0 (2024-08-08)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>CLI:  Added <code>--dry-run</code> flag</li> <li>searchbar: add searchbar to webui</li> <li>django: settings form</li> <li>settings: add sources checkbox</li> <li>django: setup basic web structure</li> <li>django: init django</li> </ul>"},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>Source:  fix xiaobao source download link not found bug</li> <li>bulma: fix bulma css extensions</li> </ul>"},{"location":"changelog/#v134-2024-02-16","title":"v1.3.4 (2024-02-16)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>fix config file backwards compatibility</li> </ul>"},{"location":"changelog/#v133-2024-02-15","title":"v1.3.3 (2024-02-15)","text":""},{"location":"changelog/#perf","title":"Perf","text":"<ul> <li>change config to use dynaconf</li> </ul>"},{"location":"changelog/#v132-2023-11-09","title":"v1.3.2 (2023-11-09)","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>File Exists function checks non-existent directory</li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>Clean up episode.py</li> </ul>"},{"location":"changelog/#v131-2023-10-23","title":"v1.3.1 (2023-10-23)","text":""},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>Get episode number from existing episode for calculation</li> <li>create Season Directory before checking local files</li> </ul>"},{"location":"changelog/#refactor_1","title":"Refactor","text":"<ul> <li>remove unused variable</li> </ul>"},{"location":"changelog/#perf_1","title":"Perf","text":"<ul> <li>remove unused init command</li> </ul>"},{"location":"changelog/#v130-2023-10-22","title":"v1.3.0 (2023-10-22)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>improve ep exist detection and set ep no.</li> </ul>"},{"location":"changelog/#fix_5","title":"Fix","text":"<ul> <li>ssstv.py scrape error fix</li> </ul>"},{"location":"changelog/#refactor_2","title":"Refactor","text":"<ul> <li>Clean code and fix types</li> <li>Clean code for download.py file</li> <li>clean code after poetry migration</li> </ul>"},{"location":"changelog/#perf_2","title":"Perf","text":"<ul> <li>add poetry script to shorten run command</li> <li>print message \"name\" already exists not \"filename\"</li> <li>reduce code complexity for sources iteration</li> </ul>"},{"location":"changelog/#v121-2023-09-02","title":"v1.2.1 (2023-09-02)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>download: flag to download specials only</li> </ul>"},{"location":"changelog/#fix_6","title":"Fix","text":"<ul> <li>_variables were created as const, didn't update according to config state</li> </ul>"},{"location":"changelog/#v120-2023-07-31","title":"v1.2.0 (2023-07-31)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>cli: New cmd to clean empty directories</li> <li>flag: Allow specifying base path in cli</li> <li>cli: Added new CLI feature to print current State</li> <li>cli: Added new CLI function to remove show</li> <li>new command to list all existing shows</li> <li>convert all folder names to simplified</li> </ul>"},{"location":"changelog/#fix_7","title":"Fix","text":"<ul> <li>cli: consider case when show does not have year</li> </ul>"},{"location":"changelog/#refactor_3","title":"Refactor","text":"<ul> <li>Separate instance state and user config</li> </ul>"},{"location":"changelog/#perf_3","title":"Perf","text":"<ul> <li>apply config before setting local state</li> </ul>"},{"location":"changelog/#v113-2023-07-24","title":"v1.1.3 (2023-07-24)","text":""},{"location":"changelog/#fix_8","title":"Fix","text":"<ul> <li>Typing syntax error</li> </ul>"},{"location":"changelog/#v112-2023-07-24","title":"v1.1.2 (2023-07-24)","text":""},{"location":"changelog/#fix_9","title":"Fix","text":"<ul> <li>catch error during download and aport</li> <li>return None if error exists and ignore result</li> </ul>"},{"location":"changelog/#v111-2023-07-24","title":"v1.1.1 (2023-07-24)","text":""},{"location":"changelog/#fix_10","title":"Fix","text":"<ul> <li>777TV year matching regex fix</li> </ul>"},{"location":"changelog/#perf_4","title":"Perf","text":"<ul> <li>catch exception upon connection error</li> </ul>"},{"location":"changelog/#v110-2023-07-24","title":"v1.1.0 (2023-07-24)","text":""},{"location":"changelog/#feat_4","title":"Feat","text":"<ul> <li>set source simplified or traditional search_query for automatic translation</li> <li>create general series directory if not exist in base</li> <li>config: created basic config setup</li> </ul>"},{"location":"changelog/#refactor_4","title":"Refactor","text":"<ul> <li>Cleanup code</li> </ul>"},{"location":"changelog/#v101-2023-07-12","title":"v1.0.1 (2023-07-12)","text":""},{"location":"changelog/#refactor_5","title":"Refactor","text":"<ul> <li>added all sources import in init.py and generalized ssstv urls into source_url and relative path</li> </ul>"},{"location":"changelog/#v100-2023-07-11","title":"v1.0.0 (2023-07-11)","text":""},{"location":"changelog/#feat_5","title":"Feat","text":"<ul> <li>source: Added new media source 777tv</li> </ul>"},{"location":"changelog/#fix_11","title":"Fix","text":"<ul> <li>websockets auto patch failed due to pyppeteer==1.0.2 dependencies</li> </ul>"},{"location":"changelog/#v100a0-2023-07-11","title":"v1.0.0a0 (2023-07-11)","text":""},{"location":"changelog/#fix_12","title":"Fix","text":"<ul> <li>update COMMIT_MSG_HOOK in makefile</li> </ul>"},{"location":"install/","title":"Install","text":""},{"location":"install/#pip","title":"pip","text":"<pre><code>pip install tvsd\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2023 Jasmine Yeung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"api/actions/","title":"Actions","text":""},{"location":"api/actions/#tvsd.actions","title":"actions","text":""},{"location":"api/actions/#tvsd.actions.list_shows_as_table","title":"list_shows_as_table","text":"<pre><code>list_shows_as_table(\n    show_index=False,\n) -&gt; Tuple[List[str], int]\n</code></pre> <p>List all shows in base directory as a table</p> <p>Parameters:</p> <ul> <li> <code>show_index</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to print the row index as the first column, useful for selection. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tuple[List[str], int]</code>         \u2013          <p>Tuple[List[str], int]: List of shows and number of shows</p> </li> </ul>"},{"location":"api/actions/#tvsd.actions.search_media_and_download","title":"search_media_and_download","text":"<pre><code>search_media_and_download(\n    query: str, specials_only: bool = False\n) -&gt; None\n</code></pre> <p>Search for media and download</p> <p>This function searches for media based on the given query string and downloads it. It first checks if the base path is mounted and exits if it is not. Then it searches for the given query and finds the show. Finally, it starts a guided download of the chosen show.</p> <p>Parameters:</p> <ul> <li> <code>query</code>             (<code>str</code>)         \u2013          <p>query string</p> </li> <li> <code>specials_only</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Download only specials episode. Defaults to False.</p> </li> </ul>"},{"location":"api/download/","title":"Download","text":""},{"location":"api/download/#tvsd.download","title":"download","text":"<p>TVSD Download Class</p>"},{"location":"api/download/#tvsd.download.Download","title":"Download","text":"<pre><code>Download(\n    target: Show | Season | Episode,\n    specials_only: bool = False,\n)\n</code></pre> <p>A class for downloading TV show episodes.</p> <p>Attributes:</p> <ul> <li> <code>_target</code>             (<code>Show | Season | Episode</code>)         \u2013          <p>The target show, season or episode to download.</p> </li> <li> <code>_base_path</code>             (<code>str</code>)         \u2013          <p>The base path for the downloaded files.</p> </li> <li> <code>_temp_base_path</code>             (<code>str</code>)         \u2013          <p>The temporary base path for the downloaded files.</p> </li> <li> <code>_specials_index</code>             (<code>int</code>)         \u2013          <p>The index for special episodes.</p> </li> <li> <code>_regular_ep_index</code>             (<code>int</code>)         \u2013          <p>The index for regular episodes.</p> </li> <li> <code>_specials_only</code>             (<code>bool</code>)         \u2013          <p>Whether to download only special episodes.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>target</code>             (<code>Show | Season | Episode</code>)         \u2013          <p>The target show, season or episode to download.</p> </li> <li> <code>specials_only</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to download only special episodes. Defaults to False.</p> </li> </ul>"},{"location":"api/download/#tvsd.download.Download.choose_download","title":"choose_download","text":"<pre><code>choose_download(season: Season) -&gt; None\n</code></pre> <p>Choose which episodes in a season to download.</p> <p>Parameters:</p> <ul> <li> <code>season</code>             (<code>Season</code>)         \u2013          <p>The season to choose episodes from.</p> </li> </ul>"},{"location":"api/download/#tvsd.download.Download.download_all","title":"download_all","text":"<pre><code>download_all(target: Season | Show | Episode) -&gt; None\n</code></pre> <p>Download all episodes under the specified Season/Show/Episode.</p> <p>Parameters:</p> <ul> <li> <code>target</code>             (<code>Season | Show | Episode</code>)         \u2013          <p>The Season, Show or Episode to download.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the target is not a Show, Season or Episode.</p> </li> </ul>"},{"location":"api/download/#tvsd.download.Download.download_episode","title":"download_episode","text":"<pre><code>download_episode(episode: Episode) -&gt; None\n</code></pre> <p>Download an episode</p> <p>Parameters:</p> <ul> <li> <code>episode</code>             (<code>Episode</code>)         \u2013          <p>Episode to download</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>m3u8 not found in episode url, Stream probably does not exist</p> </li> </ul> <p>Downloads an episode by fetching its m3u8 url and converting it to an mp4 file. If the episode already exists in the destination directory, it skips the download.</p>"},{"location":"api/download/#tvsd.download.Download.guided_download","title":"guided_download","text":"<pre><code>guided_download() -&gt; None\n</code></pre> <p>Guided download of show.</p> <p>This method prompts the user to choose whether to download all episodes of a show or a specific season. If the user chooses to download all episodes, the <code>download_all</code> method is called with the target show as the argument. If the user chooses to download a specific season, the <code>choose_download</code> method is called with the target season as the argument.</p>"},{"location":"api/download/#tvsd.download.Download.set_ep_index","title":"set_ep_index","text":"<pre><code>set_ep_index(episode: Episode) -&gt; None\n</code></pre> <p>Set index for episode</p> <p>This method sets the index for a given episode. If the episode is a special episode, it calls the <code>set_special_ep_index</code> method, otherwise it calls the <code>set_regular_ep_index</code> method.</p> <p>Parameters:</p> <ul> <li> <code>episode</code>             (<code>Episode</code>)         \u2013          <p>Episode to set index for</p> </li> </ul>"},{"location":"api/download/#tvsd.download.Download.set_regular_ep_index","title":"set_regular_ep_index","text":"<pre><code>set_regular_ep_index(episode: Episode) -&gt; None\n</code></pre> <p>Set the index for a regular episode.</p> <p>Parameters:</p> <ul> <li> <code>episode</code>             (<code>Episode</code>)         \u2013          <p>The episode to set the index for.</p> </li> </ul>"},{"location":"api/download/#tvsd.download.Download.set_special_ep_index","title":"set_special_ep_index","text":"<pre><code>set_special_ep_index(episode: Episode) -&gt; None\n</code></pre> <p>Set the index for a special episode.</p> <p>Parameters:</p> <ul> <li> <code>episode</code>             (<code>Episode</code>)         \u2013          <p>The episode to set the index for.</p> </li> </ul>"},{"location":"api/search/","title":"Search","text":""},{"location":"api/search/#tvsd.search","title":"search","text":""},{"location":"api/search/#tvsd.search.SearchQuery","title":"SearchQuery","text":"<pre><code>SearchQuery(query: str)\n</code></pre> <p>Searches for a show based on query</p>"},{"location":"api/search/#tvsd.search.SearchQuery.chosen_show","title":"chosen_show  <code>property</code>","text":"<pre><code>chosen_show: Season\n</code></pre> <p>Returns the chosen show.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If no show is chosen.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Season</code> (            <code>Season</code> )        \u2013          <p>The chosen show.</p> </li> </ul>"},{"location":"api/search/#tvsd.search.SearchQuery.check_local_shows","title":"check_local_shows","text":"<pre><code>check_local_shows() -&gt; None\n</code></pre> <p>Checks if a TV show exists locally in the specified directory.</p>"},{"location":"api/search/#tvsd.search.SearchQuery.find_show","title":"find_show","text":"<pre><code>find_show() -&gt; Season\n</code></pre> <p>Finds show information either locally or online.</p> <p>If the show information is not found locally or if no show has been chosen, the method will attempt to find the show online. If no show is found, a ValueError will be raised.</p> <p>Returns:</p> <ul> <li> <code>Season</code>         \u2013          <p>The chosen show object with its details fetched.</p> </li> </ul>"},{"location":"api/search/#tvsd.search.SearchQuery.find_shows_online","title":"find_shows_online","text":"<pre><code>find_shows_online() -&gt; None\n</code></pre> <p>Searches for TV shows online using the specified query and displays the results in a table. The user is prompted to choose a show from the table, and the chosen show is stored in the <code>_chosen_show</code> attribute of the <code>TVShowDownloader</code> instance.</p>"},{"location":"api/types/","title":"Types","text":""},{"location":"api/types/#tvsd.types","title":"types","text":"<p>Custom types for TVSD</p>"},{"location":"api/types/#tvsd.types.Episode","title":"Episode","text":"<pre><code>Episode(\n    episode_name: str, episode_url: str, season: Season\n)\n</code></pre> <p>A class representing an episode of a TV show.</p> <p>Attributes:</p> <ul> <li> <code>_name</code>             (<code>str</code>)         \u2013          <p>The name of the episode.</p> </li> <li> <code>_url</code>             (<code>str</code>)         \u2013          <p>The URL of the episode.</p> </li> <li> <code>_number</code>             (<code>int</code>)         \u2013          <p>The episode number.</p> </li> <li> <code>_season</code>             (<code>Season</code>)         \u2013          <p>The season that the episode belongs to.</p> </li> <li> <code>_not_specials</code>             (<code>bool</code>)         \u2013          <p>True if the episode is not a special episode, False otherwise.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>episode_name</code>             (<code>str</code>)         \u2013          <p>The name of the episode.</p> </li> <li> <code>episode_url</code>             (<code>str</code>)         \u2013          <p>The URL of the episode.</p> </li> <li> <code>season</code>             (<code>Season</code>)         \u2013          <p>The season that this episode belongs to.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.determine_episode_number","title":"determine_episode_number  <code>property</code>","text":"<pre><code>determine_episode_number: int\n</code></pre> <p>Determines the episode number.</p> <p>This method determines the episode number by either incrementing the previous episode number by 1 or by identifying the episode number from the episode name. The episode number is then stored in the instance variable _number.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.episode_number","title":"episode_number  <code>property</code> <code>writable</code>","text":"<pre><code>episode_number: int\n</code></pre> <p>Returns the episode number.</p> <p>If the episode number is not already set, it will be identified from the episode name.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.fetch_episode_m3u8_url","title":"fetch_episode_m3u8_url  <code>property</code>","text":"<pre><code>fetch_episode_m3u8_url: str\n</code></pre> <p>Fetches the m3u8 url of the episode.</p> <p>This method fetches the m3u8 url of the episode by calling the fetch_episode_m3u8 method of the season's source object, passing in the relative episode url as a parameter. If the m3u8 url is not found, an empty string is returned.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The m3u8 url of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.file_exists_locally","title":"file_exists_locally  <code>property</code>","text":"<pre><code>file_exists_locally: str\n</code></pre> <p>Returns the name of the existing file if the episode exists locally, or an empty string otherwise.</p> <p>Returns:</p> <ul> <li> <code>filename</code> (            <code>str</code> )        \u2013          <p>Name of existing file if the episode exists locally, Empty String otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.filename","title":"filename  <code>property</code>","text":"<pre><code>filename: str\n</code></pre> <p>Returns the filename of the episode.</p> <p>The filename is formatted as follows: {show_prefix} - S{season_index}E{episode_number} - {episode_name}</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The filename of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.get_episode_url","title":"get_episode_url  <code>property</code>","text":"<pre><code>get_episode_url: str\n</code></pre> <p>Gets the episode url from the episode object.</p> <p>This method returns the url of the episode object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The episode url.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.is_regular","title":"is_regular  <code>property</code>","text":"<pre><code>is_regular: bool\n</code></pre> <p>Returns True if the episode is a regular episode, False otherwise.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a regular episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.is_specials","title":"is_specials  <code>property</code>","text":"<pre><code>is_specials: bool\n</code></pre> <p>Returns True if the episode is a special episode, False otherwise.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a special episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Returns the episode name.</p> <p>This method returns the name of the episode.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The episode name.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.relative_destination_dir","title":"relative_destination_dir  <code>property</code>","text":"<pre><code>relative_destination_dir: str\n</code></pre> <p>Returns the relative destination directory of the episode.</p> <p>If the episode is a special episode, the relative destination directory will be the relative specials directory of the season. Otherwise, it will be the relative season directory of the season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative destination directory of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.relative_episode_file_path","title":"relative_episode_file_path  <code>property</code>","text":"<pre><code>relative_episode_file_path: str\n</code></pre> <p>Returns the relative path to the episode file.</p> <p>The returned path is relative to the root directory of the TVSD project.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative path to the episode file.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.season","title":"season  <code>property</code>","text":"<pre><code>season: Season\n</code></pre> <p>Returns the season object.</p> <p>Returns:</p> <ul> <li> <code>Season</code> (            <code>Season</code> )        \u2013          <p>The season object.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Returns a string representation of the Episode object. The string contains the name and episode number of the episode.</p>"},{"location":"api/types/#tvsd.types.Episode.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Returns a string representation of the Episode object.</p> <p>The string representation includes the name and episode number of the episode.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>A string representation of the Episode object.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.determine_if_specials","title":"determine_if_specials","text":"<pre><code>determine_if_specials() -&gt; bool\n</code></pre> <p>Determines if the episode is a special episode from episode title.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a special episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Episode.identify_episode_number_from_name","title":"identify_episode_number_from_name","text":"<pre><code>identify_episode_number_from_name() -&gt; int\n</code></pre> <p>Tries to identify the episode number from the episode name.</p> <p>This function uses a regular expression to identify the episode number from the episode name. If the episode number is found, it is returned as an integer. If it is not found, the function returns 1.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The identified episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.EpisodeDetailsFromURL","title":"EpisodeDetailsFromURL","text":"<p>             Bases: <code>TypedDict</code></p> <p>DetailsFromURL type object</p> <p>Attributes:</p> <ul> <li> <code>title</code>             (<code>str</code>)         \u2013          <p>The title of the episode</p> </li> <li> <code>url</code>             (<code>str</code>)         \u2013          <p>The URL of the episode</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season","title":"Season","text":"<pre><code>Season(\n    fetch_episode_m3u8: Callable,\n    episodes: List[Episode],\n    details: SeasonDetailsFromURL,\n    source: Source,\n    note: str = \"\",\n    details_url: str = \"\",\n)\n</code></pre> <p>Represents a season of a TV show.</p> <p>Attributes:</p> <ul> <li> <code>fetch_episode_m3u8</code>             (<code>Callable</code>)         \u2013          <p>A function that fetches the m3u8 file for an episode.</p> </li> <li> <code>episodes</code>             (<code>List[Episode]</code>)         \u2013          <p>A list of episodes in the season.</p> </li> <li> <code>details</code>             (<code>SeasonDetailsFromURL</code>)         \u2013          <p>Details about the season.</p> </li> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>The source of the season.</p> </li> <li> <code>note</code>             (<code>str</code>)         \u2013          <p>A note about the season.</p> </li> <li> <code>details_url</code>             (<code>str</code>)         \u2013          <p>The URL for the details of the season.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>fetch_episode_m3u8</code>             (<code>Callable</code>)         \u2013          <p>A callable function that fetches the m3u8 file for an episode.</p> </li> <li> <code>episodes</code>             (<code>List[Episode]</code>)         \u2013          <p>A list of Episode objects.</p> </li> <li> <code>details</code>             (<code>SeasonDetailsFromURL</code>)         \u2013          <p>A dictionary containing details about the season.</p> </li> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>A Source object representing the source of the season.</p> </li> <li> <code>note</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>A note about the season. Defaults to \"\".</p> </li> <li> <code>details_url</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The URL of the page containing details about the season. Defaults to \"\".</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre> <p>Returns the description of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>description of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.details_url","title":"details_url  <code>property</code> <code>writable</code>","text":"<pre><code>details_url: str\n</code></pre> <p>Returns the details url of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>details url of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.episodes","title":"episodes  <code>property</code>","text":"<pre><code>episodes: List[Episode]\n</code></pre> <p>Returns the list of episodes in the season.</p> <p>Returns:</p> <ul> <li> <code>List[Episode]</code>         \u2013          <p>List[Episode]: A list of Episode objects representing the episodes in the season.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.note","title":"note  <code>property</code> <code>writable</code>","text":"<pre><code>note: str\n</code></pre> <p>Get the note of the show</p> <p>This method returns the note of the show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Note of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.relative_season_dir","title":"relative_season_dir  <code>property</code>","text":"<pre><code>relative_season_dir: str\n</code></pre> <p>Returns the relative directory for the current season.</p> <p>If the season index is 0, the relative specials directory is returned. Otherwise, the relative directory for the current season is returned.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative directory for the current season.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.relative_specials_dir","title":"relative_specials_dir  <code>property</code>","text":"<pre><code>relative_specials_dir: str\n</code></pre> <p>Returns the relative specials directory</p> <p>This method returns the relative directory for the specials of the season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>relative specials directory</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.season_index","title":"season_index  <code>property</code>","text":"<pre><code>season_index: int\n</code></pre> <p>Returns the season index</p> <p>This method returns the index of the season. If the index has not been set yet, it will be determined based on the title of the season. If the title does not contain a season index, the default index of 1 will be returned.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>season index</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.show","title":"show  <code>property</code>","text":"<pre><code>show: Show\n</code></pre> <p>Returns the show of the season</p> <p>Returns:</p> <ul> <li> <code>Show</code> (            <code>Show</code> )        \u2013          <p>show of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.source","title":"source  <code>property</code>","text":"<pre><code>source: Source\n</code></pre> <p>Returns the source of the season</p> <p>Returns:</p> <ul> <li> <code>Source</code> (            <code>Source</code> )        \u2013          <p>source of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Returns the title of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>title of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.year","title":"year  <code>property</code>","text":"<pre><code>year: str\n</code></pre> <p>Returns the year of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>year of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.create_show","title":"create_show","text":"<pre><code>create_show() -&gt; Show\n</code></pre> <p>Create a parent show for this season.</p> <p>This method creates a parent show for the current season object. The parent show is created using the source type, title, and beginning year of the current season. The created show is then returned.</p> <p>Returns:</p> <ul> <li> <code>Show</code> (            <code>Show</code> )        \u2013          <p>The created parent show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.determine_season_index","title":"determine_season_index","text":"<pre><code>determine_season_index(season_title: str) -&gt; int\n</code></pre> <p>Determines season index from title of season</p> <p>Parameters:</p> <ul> <li> <code>season_title</code>             (<code>str</code>)         \u2013          <p>Title of the season to query with. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>index of season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.determine_show_begin_year","title":"determine_show_begin_year","text":"<pre><code>determine_show_begin_year() -&gt; str\n</code></pre> <p>Query the begin year of the show</p> <p>This method determines the begin year of the show based on the season's year and index. If the season index is greater than 1, it prompts the user to input the year of the first season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Begin year of the show as a string</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Season.fetch_details","title":"fetch_details","text":"<pre><code>fetch_details() -&gt; None\n</code></pre> <p>Fetch details for season for download.</p> <p>This method creates a show, generates episodes, and fetches details for the season to prepare for download.</p>"},{"location":"api/types/#tvsd.types.Season.generate_episodes","title":"generate_episodes","text":"<pre><code>generate_episodes() -&gt; None\n</code></pre> <p>Generate Episode objects for the season.</p> <p>This method generates Episode objects for the season based on the list of episodes associated with the season. If an episode in the list is already an Episode object, it is added to the list of generated Episode objects. If an episode in the list is not an Episode object, its details are parsed from the source and a new Episode object is created and added to the list of generated Episode objects.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          <p>None</p> </li> </ul>"},{"location":"api/types/#tvsd.types.SeasonDetailsFromURL","title":"SeasonDetailsFromURL","text":"<p>             Bases: <code>TypedDict</code></p> <p>DetailsFromURL type object</p> <p>Attributes:</p> <ul> <li> <code>title</code>             (<code>str</code>)         \u2013          <p>The title of the season.</p> </li> <li> <code>description</code>             (<code>str</code>)         \u2013          <p>The description of the season.</p> </li> <li> <code>episodes</code>             (<code>List[Episode]</code>)         \u2013          <p>A list of Episode objects representing the episodes in the season.</p> </li> <li> <code>year</code>             (<code>str</code>)         \u2013          <p>The year the season was released.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show","title":"Show","text":"<pre><code>Show(source: Source, title: str = '', begin_year: str = '')\n</code></pre> <p>Represents a TV show.</p> <p>Attributes:</p> <ul> <li> <code>_title</code>             (<code>str</code>)         \u2013          <p>The title of the show.</p> </li> <li> <code>_source</code>             (<code>Source</code>)         \u2013          <p>The source of the show.</p> </li> <li> <code>_seasons</code>             (<code>List[Season]</code>)         \u2013          <p>The seasons of the show.</p> </li> <li> <code>_begin_year</code>             (<code>str</code>)         \u2013          <p>The year the show began.</p> </li> <li> <code>_prefix</code>             (<code>str</code>)         \u2013          <p>The directory name of the show.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>The source of the show.</p> </li> <li> <code>title</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The title of the show. Defaults to \"\".</p> </li> <li> <code>begin_year</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The year the show began. Defaults to \"\".</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.begin_year","title":"begin_year  <code>property</code>","text":"<pre><code>begin_year: str\n</code></pre> <p>Returns the begin year of the show</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>begin year of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.relative_show_dir","title":"relative_show_dir  <code>property</code>","text":"<pre><code>relative_show_dir: str\n</code></pre> <p>Get the relative directory of the show in the media directory from the base path.</p> <p>This method returns the relative directory of the show in the media directory from the base path.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative directory of the show in the media directory from the base path.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.seasons","title":"seasons  <code>property</code>","text":"<pre><code>seasons: List[Season]\n</code></pre> <p>Returns a list of all the seasons of the show.</p> <p>Returns:</p> <ul> <li> <code>List[Season]</code>         \u2013          <p>List[Season]: A list of all the seasons of the show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.show_prefix","title":"show_prefix  <code>property</code>","text":"<pre><code>show_prefix: str\n</code></pre> <p>Returns the show prefix, which is the directory name of the show.</p> <p>If the show prefix has already been set, it will be returned. Otherwise, it will be generated using the generate_show_prefix method.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The show prefix (the directory name of the show).</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>Getter method for the source of the current Show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The source of the current Show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str\n</code></pre> <p>Get the title of the show</p> <p>This method returns the title of the show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Title of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.Show.generate_show_prefix","title":"generate_show_prefix","text":"<pre><code>generate_show_prefix() -&gt; str\n</code></pre> <p>Generate the prefix for the show.</p> <p>The prefix is the directory name of the show, and is generated by combining the show's title and beginning year.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The prefix for the show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode","title":"episode","text":"<p>Episode class.</p>"},{"location":"api/types/#tvsd.types.episode.Episode","title":"Episode","text":"<pre><code>Episode(\n    episode_name: str, episode_url: str, season: Season\n)\n</code></pre> <p>A class representing an episode of a TV show.</p> <p>Attributes:</p> <ul> <li> <code>_name</code>             (<code>str</code>)         \u2013          <p>The name of the episode.</p> </li> <li> <code>_url</code>             (<code>str</code>)         \u2013          <p>The URL of the episode.</p> </li> <li> <code>_number</code>             (<code>int</code>)         \u2013          <p>The episode number.</p> </li> <li> <code>_season</code>             (<code>Season</code>)         \u2013          <p>The season that the episode belongs to.</p> </li> <li> <code>_not_specials</code>             (<code>bool</code>)         \u2013          <p>True if the episode is not a special episode, False otherwise.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>episode_name</code>             (<code>str</code>)         \u2013          <p>The name of the episode.</p> </li> <li> <code>episode_url</code>             (<code>str</code>)         \u2013          <p>The URL of the episode.</p> </li> <li> <code>season</code>             (<code>Season</code>)         \u2013          <p>The season that this episode belongs to.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.determine_episode_number","title":"determine_episode_number  <code>property</code>","text":"<pre><code>determine_episode_number: int\n</code></pre> <p>Determines the episode number.</p> <p>This method determines the episode number by either incrementing the previous episode number by 1 or by identifying the episode number from the episode name. The episode number is then stored in the instance variable _number.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.episode_number","title":"episode_number  <code>property</code> <code>writable</code>","text":"<pre><code>episode_number: int\n</code></pre> <p>Returns the episode number.</p> <p>If the episode number is not already set, it will be identified from the episode name.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.fetch_episode_m3u8_url","title":"fetch_episode_m3u8_url  <code>property</code>","text":"<pre><code>fetch_episode_m3u8_url: str\n</code></pre> <p>Fetches the m3u8 url of the episode.</p> <p>This method fetches the m3u8 url of the episode by calling the fetch_episode_m3u8 method of the season's source object, passing in the relative episode url as a parameter. If the m3u8 url is not found, an empty string is returned.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The m3u8 url of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.file_exists_locally","title":"file_exists_locally  <code>property</code>","text":"<pre><code>file_exists_locally: str\n</code></pre> <p>Returns the name of the existing file if the episode exists locally, or an empty string otherwise.</p> <p>Returns:</p> <ul> <li> <code>filename</code> (            <code>str</code> )        \u2013          <p>Name of existing file if the episode exists locally, Empty String otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.filename","title":"filename  <code>property</code>","text":"<pre><code>filename: str\n</code></pre> <p>Returns the filename of the episode.</p> <p>The filename is formatted as follows: {show_prefix} - S{season_index}E{episode_number} - {episode_name}</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The filename of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.get_episode_url","title":"get_episode_url  <code>property</code>","text":"<pre><code>get_episode_url: str\n</code></pre> <p>Gets the episode url from the episode object.</p> <p>This method returns the url of the episode object.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The episode url.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.is_regular","title":"is_regular  <code>property</code>","text":"<pre><code>is_regular: bool\n</code></pre> <p>Returns True if the episode is a regular episode, False otherwise.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a regular episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.is_specials","title":"is_specials  <code>property</code>","text":"<pre><code>is_specials: bool\n</code></pre> <p>Returns True if the episode is a special episode, False otherwise.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a special episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Returns the episode name.</p> <p>This method returns the name of the episode.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The episode name.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.relative_destination_dir","title":"relative_destination_dir  <code>property</code>","text":"<pre><code>relative_destination_dir: str\n</code></pre> <p>Returns the relative destination directory of the episode.</p> <p>If the episode is a special episode, the relative destination directory will be the relative specials directory of the season. Otherwise, it will be the relative season directory of the season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative destination directory of the episode.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.relative_episode_file_path","title":"relative_episode_file_path  <code>property</code>","text":"<pre><code>relative_episode_file_path: str\n</code></pre> <p>Returns the relative path to the episode file.</p> <p>The returned path is relative to the root directory of the TVSD project.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative path to the episode file.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.season","title":"season  <code>property</code>","text":"<pre><code>season: Season\n</code></pre> <p>Returns the season object.</p> <p>Returns:</p> <ul> <li> <code>Season</code> (            <code>Season</code> )        \u2013          <p>The season object.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Returns a string representation of the Episode object. The string contains the name and episode number of the episode.</p>"},{"location":"api/types/#tvsd.types.episode.Episode.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Returns a string representation of the Episode object.</p> <p>The string representation includes the name and episode number of the episode.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>A string representation of the Episode object.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.determine_if_specials","title":"determine_if_specials","text":"<pre><code>determine_if_specials() -&gt; bool\n</code></pre> <p>Determines if the episode is a special episode from episode title.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the episode is a special episode, False otherwise.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.episode.Episode.identify_episode_number_from_name","title":"identify_episode_number_from_name","text":"<pre><code>identify_episode_number_from_name() -&gt; int\n</code></pre> <p>Tries to identify the episode number from the episode name.</p> <p>This function uses a regular expression to identify the episode number from the episode name. If the episode number is found, it is returned as an integer. If it is not found, the function returns 1.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The identified episode number.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season","title":"season","text":"<p>TVSD Season class, parent of Episodes</p>"},{"location":"api/types/#tvsd.types.season.Season","title":"Season","text":"<pre><code>Season(\n    fetch_episode_m3u8: Callable,\n    episodes: List[Episode],\n    details: SeasonDetailsFromURL,\n    source: Source,\n    note: str = \"\",\n    details_url: str = \"\",\n)\n</code></pre> <p>Represents a season of a TV show.</p> <p>Attributes:</p> <ul> <li> <code>fetch_episode_m3u8</code>             (<code>Callable</code>)         \u2013          <p>A function that fetches the m3u8 file for an episode.</p> </li> <li> <code>episodes</code>             (<code>List[Episode]</code>)         \u2013          <p>A list of episodes in the season.</p> </li> <li> <code>details</code>             (<code>SeasonDetailsFromURL</code>)         \u2013          <p>Details about the season.</p> </li> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>The source of the season.</p> </li> <li> <code>note</code>             (<code>str</code>)         \u2013          <p>A note about the season.</p> </li> <li> <code>details_url</code>             (<code>str</code>)         \u2013          <p>The URL for the details of the season.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>fetch_episode_m3u8</code>             (<code>Callable</code>)         \u2013          <p>A callable function that fetches the m3u8 file for an episode.</p> </li> <li> <code>episodes</code>             (<code>List[Episode]</code>)         \u2013          <p>A list of Episode objects.</p> </li> <li> <code>details</code>             (<code>SeasonDetailsFromURL</code>)         \u2013          <p>A dictionary containing details about the season.</p> </li> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>A Source object representing the source of the season.</p> </li> <li> <code>note</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>A note about the season. Defaults to \"\".</p> </li> <li> <code>details_url</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The URL of the page containing details about the season. Defaults to \"\".</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre> <p>Returns the description of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>description of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.details_url","title":"details_url  <code>property</code> <code>writable</code>","text":"<pre><code>details_url: str\n</code></pre> <p>Returns the details url of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>details url of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.episodes","title":"episodes  <code>property</code>","text":"<pre><code>episodes: List[Episode]\n</code></pre> <p>Returns the list of episodes in the season.</p> <p>Returns:</p> <ul> <li> <code>List[Episode]</code>         \u2013          <p>List[Episode]: A list of Episode objects representing the episodes in the season.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.note","title":"note  <code>property</code> <code>writable</code>","text":"<pre><code>note: str\n</code></pre> <p>Get the note of the show</p> <p>This method returns the note of the show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Note of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.relative_season_dir","title":"relative_season_dir  <code>property</code>","text":"<pre><code>relative_season_dir: str\n</code></pre> <p>Returns the relative directory for the current season.</p> <p>If the season index is 0, the relative specials directory is returned. Otherwise, the relative directory for the current season is returned.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative directory for the current season.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.relative_specials_dir","title":"relative_specials_dir  <code>property</code>","text":"<pre><code>relative_specials_dir: str\n</code></pre> <p>Returns the relative specials directory</p> <p>This method returns the relative directory for the specials of the season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>relative specials directory</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.season_index","title":"season_index  <code>property</code>","text":"<pre><code>season_index: int\n</code></pre> <p>Returns the season index</p> <p>This method returns the index of the season. If the index has not been set yet, it will be determined based on the title of the season. If the title does not contain a season index, the default index of 1 will be returned.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>season index</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.show","title":"show  <code>property</code>","text":"<pre><code>show: Show\n</code></pre> <p>Returns the show of the season</p> <p>Returns:</p> <ul> <li> <code>Show</code> (            <code>Show</code> )        \u2013          <p>show of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.source","title":"source  <code>property</code>","text":"<pre><code>source: Source\n</code></pre> <p>Returns the source of the season</p> <p>Returns:</p> <ul> <li> <code>Source</code> (            <code>Source</code> )        \u2013          <p>source of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Returns the title of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>title of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.year","title":"year  <code>property</code>","text":"<pre><code>year: str\n</code></pre> <p>Returns the year of the season</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>year of the season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.create_show","title":"create_show","text":"<pre><code>create_show() -&gt; Show\n</code></pre> <p>Create a parent show for this season.</p> <p>This method creates a parent show for the current season object. The parent show is created using the source type, title, and beginning year of the current season. The created show is then returned.</p> <p>Returns:</p> <ul> <li> <code>Show</code> (            <code>Show</code> )        \u2013          <p>The created parent show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.determine_season_index","title":"determine_season_index","text":"<pre><code>determine_season_index(season_title: str) -&gt; int\n</code></pre> <p>Determines season index from title of season</p> <p>Parameters:</p> <ul> <li> <code>season_title</code>             (<code>str</code>)         \u2013          <p>Title of the season to query with. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>index of season</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.determine_show_begin_year","title":"determine_show_begin_year","text":"<pre><code>determine_show_begin_year() -&gt; str\n</code></pre> <p>Query the begin year of the show</p> <p>This method determines the begin year of the show based on the season's year and index. If the season index is greater than 1, it prompts the user to input the year of the first season.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Begin year of the show as a string</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.Season.fetch_details","title":"fetch_details","text":"<pre><code>fetch_details() -&gt; None\n</code></pre> <p>Fetch details for season for download.</p> <p>This method creates a show, generates episodes, and fetches details for the season to prepare for download.</p>"},{"location":"api/types/#tvsd.types.season.Season.generate_episodes","title":"generate_episodes","text":"<pre><code>generate_episodes() -&gt; None\n</code></pre> <p>Generate Episode objects for the season.</p> <p>This method generates Episode objects for the season based on the list of episodes associated with the season. If an episode in the list is already an Episode object, it is added to the list of generated Episode objects. If an episode in the list is not an Episode object, its details are parsed from the source and a new Episode object is created and added to the list of generated Episode objects.</p> <p>Returns:</p> <ul> <li> <code>None</code>         \u2013          <p>None</p> </li> </ul>"},{"location":"api/types/#tvsd.types.season.check_season_index","title":"check_season_index","text":"<pre><code>check_season_index(show_title: str) -&gt; int\n</code></pre> <p>Checks the season number for a particular show based on the show title.</p> <p>Parameters:</p> <ul> <li> <code>show_title</code>             (<code>str</code>)         \u2013          <p>The title of the show to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>The index of the season identified from the title.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show","title":"show","text":"<p>TYSD Show Class, parent of Seasons Currently not used a lot, will consider removing</p>"},{"location":"api/types/#tvsd.types.show.Show","title":"Show","text":"<pre><code>Show(source: Source, title: str = '', begin_year: str = '')\n</code></pre> <p>Represents a TV show.</p> <p>Attributes:</p> <ul> <li> <code>_title</code>             (<code>str</code>)         \u2013          <p>The title of the show.</p> </li> <li> <code>_source</code>             (<code>Source</code>)         \u2013          <p>The source of the show.</p> </li> <li> <code>_seasons</code>             (<code>List[Season]</code>)         \u2013          <p>The seasons of the show.</p> </li> <li> <code>_begin_year</code>             (<code>str</code>)         \u2013          <p>The year the show began.</p> </li> <li> <code>_prefix</code>             (<code>str</code>)         \u2013          <p>The directory name of the show.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>source</code>             (<code>Source</code>)         \u2013          <p>The source of the show.</p> </li> <li> <code>title</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The title of the show. Defaults to \"\".</p> </li> <li> <code>begin_year</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>The year the show began. Defaults to \"\".</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.begin_year","title":"begin_year  <code>property</code>","text":"<pre><code>begin_year: str\n</code></pre> <p>Returns the begin year of the show</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>begin year of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.relative_show_dir","title":"relative_show_dir  <code>property</code>","text":"<pre><code>relative_show_dir: str\n</code></pre> <p>Get the relative directory of the show in the media directory from the base path.</p> <p>This method returns the relative directory of the show in the media directory from the base path.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The relative directory of the show in the media directory from the base path.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.seasons","title":"seasons  <code>property</code>","text":"<pre><code>seasons: List[Season]\n</code></pre> <p>Returns a list of all the seasons of the show.</p> <p>Returns:</p> <ul> <li> <code>List[Season]</code>         \u2013          <p>List[Season]: A list of all the seasons of the show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.show_prefix","title":"show_prefix  <code>property</code>","text":"<pre><code>show_prefix: str\n</code></pre> <p>Returns the show prefix, which is the directory name of the show.</p> <p>If the show prefix has already been set, it will be returned. Otherwise, it will be generated using the generate_show_prefix method.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The show prefix (the directory name of the show).</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.source","title":"source  <code>property</code>","text":"<pre><code>source: str\n</code></pre> <p>Getter method for the source of the current Show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The source of the current Show.</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str\n</code></pre> <p>Get the title of the show</p> <p>This method returns the title of the show.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Title of the show</p> </li> </ul>"},{"location":"api/types/#tvsd.types.show.Show.generate_show_prefix","title":"generate_show_prefix","text":"<pre><code>generate_show_prefix() -&gt; str\n</code></pre> <p>Generate the prefix for the show.</p> <p>The prefix is the directory name of the show, and is generated by combining the show's title and beginning year.</p> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>The prefix for the show.</p> </li> </ul>"},{"location":"api/utils/","title":"Utils","text":""},{"location":"api/utils/#tvsd.utils","title":"utils","text":"<p>TVSD Utilities, contains useful functions</p>"},{"location":"api/utils/#tvsd.utils.dir_exists","title":"dir_exists","text":"<pre><code>dir_exists(path: str, create_if_not: bool = False) -&gt; bool\n</code></pre> <p>Check if a directory is mounted and exists.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>The path to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the directory exists and is mounted, False otherwise.</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.file_exists","title":"file_exists","text":"<pre><code>file_exists(file_path: str) -&gt; bool\n</code></pre> <p>Checks if a file exists</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>             (<code>str</code>)         \u2013          <p>Path to file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if file exists</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.file_exists_in_base","title":"file_exists_in_base","text":"<pre><code>file_exists_in_base(file_path: str) -&gt; bool\n</code></pre> <p>Checks if a file exists in the base path</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>             (<code>str</code>)         \u2013          <p>Path to file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if file exists</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.get_next_specials_index","title":"get_next_specials_index","text":"<pre><code>get_next_specials_index(show_dir: str) -&gt; int\n</code></pre> <p>Gets the next specials index.</p> <p>Parameters:</p> <ul> <li> <code>show_dir</code>             (<code>str</code>)         \u2013          <p>Path to show directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>Next specials index.</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.is_video","title":"is_video","text":"<pre><code>is_video(video_path: str) -&gt; bool\n</code></pre> <p>Checks if a file is a video.</p> <p>Parameters:</p> <ul> <li> <code>video_path</code>             (<code>str</code>)         \u2013          <p>Path to video file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if the file is a video, False otherwise.</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.mkdir_from_base","title":"mkdir_from_base","text":"<pre><code>mkdir_from_base(subdir: str) -&gt; None\n</code></pre> <p>Creates a directory from media root.</p> <p>Parameters:</p> <ul> <li> <code>subdir</code>             (<code>str</code>)         \u2013          <p>Directory to create.</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.mkdir_if_no","title":"mkdir_if_no","text":"<pre><code>mkdir_if_no(check_dir: str, recursive: bool = True) -&gt; None\n</code></pre> <p>Creates a directory if it does not exist</p> <p>Parameters:</p> <ul> <li> <code>check_dir</code>             (<code>str</code>)         \u2013          <p>Directory to check</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.relative_to_absolute_path","title":"relative_to_absolute_path","text":"<pre><code>relative_to_absolute_path(path: str) -&gt; str\n</code></pre> <p>Converts a relative path to an absolute path</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>Relative path</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (            <code>str</code> )        \u2013          <p>Absolute path</p> </li> </ul>"},{"location":"api/utils/#tvsd.utils.typer_easy_cli","title":"typer_easy_cli","text":"<pre><code>typer_easy_cli(func)\n</code></pre> <p>A decorator that takes a fully-annotated function and transforms it into a Typer command. Based on: https://github.com/tiangolo/typer/issues/336#issuecomment-1251698736</p> <p>At the moment, the function needs to have only keywords at the moment, so this is ok:</p> <p>def fun(*, par1: int, par2: float):     ...</p> <p>but this is NOT ok:</p> <p>def fun(par1: int, par2: float):     ...</p>"},{"location":"api/utils/#tvsd.utils.video_in_dir","title":"video_in_dir","text":"<pre><code>video_in_dir(dir_path: str, recursive: bool = True) -&gt; bool\n</code></pre> <p>Checks if a directory contains a video</p> <p>Parameters:</p> <ul> <li> <code>dir_path</code>             (<code>str</code>)         \u2013          <p>Path to directory</p> </li> <li> <code>recursive</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to search recursively. Defaults to True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (            <code>bool</code> )        \u2013          <p>True if directory contains a video</p> </li> </ul>"}]}